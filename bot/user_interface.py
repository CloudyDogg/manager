import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, CHAT_ID_1, CHAT_ID_2, CHATS, MESSAGES, PRIVACY_INSTRUCTIONS, ADMIN_IDS
from db_manager import DBManager
from chat_manager import chat_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)
class UserStates(StatesGroup):
    selecting_chat = State()  # –í—ã–±–æ—Ä —á–∞—Ç–∞
    confirming_join = State() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    changing_privacy = State() # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    feedback = State()  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_start_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–•–æ—á—É –≤ —á–∞—Ç üîê", callback_data="select_chat")],
        [
            InlineKeyboardButton(text=MESSAGES["info_button"], callback_data="info"),
            InlineKeyboardButton(text=MESSAGES["support_button"], callback_data="support")
        ]
    ])
    return keyboard

def get_chat_selection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=CHATS[CHAT_ID_1]["name"], callback_data=f"join_chat:{CHAT_ID_1}")],
        [InlineKeyboardButton(text=CHATS[CHAT_ID_2]["name"], callback_data=f"join_chat:{CHAT_ID_2}")],
        [InlineKeyboardButton(text=MESSAGES["back_button"], callback_data="back_to_start")]
    ])
    return keyboard

def get_confirm_join_keyboard(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=MESSAGES["join_button"], callback_data=f"confirm_join:{chat_id}")],
        [InlineKeyboardButton(text=MESSAGES["back_button"], callback_data="select_chat")]
    ])
    return keyboard

def get_privacy_issue_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üìã", callback_data="show_privacy_instructions")],
        [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data="try_again")],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º üë®‚Äçüíº", callback_data="contact_admin")],
        [InlineKeyboardButton(text=MESSAGES["back_button"], callback_data="select_chat")]
    ])
    return keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_admin_contact_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    return {
        "username": "admin_support", 
        "email": "admin@yourdomain.com",
        "phone": "+7 (XXX) XXX-XX-XX"
    }

async def notify_admins(message, user_id=None, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=admin_id, text=message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    DBManager.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        MESSAGES["welcome"],
        reply_markup=get_start_keyboard()
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (@{message.from_user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(Command("admin"))
async def cmd_admin_forward(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    from bot.admin_interface import is_admin, cmd_admin
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id in ADMIN_IDS or str(message.from_user.id) in [str(admin_id) for admin_id in ADMIN_IDS]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ admin_interface
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å")
        await cmd_admin(message, state)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        logger.warning(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤—Å–µ –∫–æ–ª–±—ç–∫–∏ —Å –µ–¥–∏–Ω–æ–π —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞)
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback_query"""
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    callback_data = callback_query.data
    current_state = await state.get_state()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–ª–±—ç–∫–∏, –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç admin_interface.py
    if callback_data.startswith("admin:"):
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π callback: {callback_data}")
        return
    
    try:
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
        if callback_data == "select_chat":
            # –í—ã–±–æ—Ä —á–∞—Ç–∞
            await state.set_state(UserStates.selecting_chat)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=MESSAGES["select_chat"],
                reply_markup=get_chat_selection_keyboard()
            )
        
        elif callback_data.startswith("join_chat:"):
            # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback data
            chat_id = int(callback_data.split(":")[1])
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await chat_manager.get_chat_info(chat_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(selected_chat_id=chat_id)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
            await state.set_state(UserStates.confirming_join)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=MESSAGES["confirm_join"].format(chat_name=chat_info["name"]),
                reply_markup=get_confirm_join_keyboard(chat_id)
            )
        
        elif callback_data.startswith("confirm_join:"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç
            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback data
            chat_id = int(callback_data.split(":")[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
            can_be_added, reason = await chat_manager.check_user_can_be_added(
                user_id=callback_query.from_user.id,
                chat_id=chat_id
            )
            
            if not can_be_added:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç: {reason}",
                    reply_markup=get_chat_selection_keyboard()
                )
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
                success, message, additional_data = await chat_manager.add_user_to_chat(
                    user_id=callback_query.from_user.id,
                    chat_id=chat_id
                )
                
                if success:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    chat_info = await chat_manager.get_chat_info(chat_id)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=chat_info["welcome_message"] or MESSAGES["success_join"],
                        reply_markup=None
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                    if additional_data and "admin_username" in additional_data:
                        admin_username = additional_data["admin_username"]
                        user_name = callback_query.from_user.username or f"id{callback_query.from_user.id}"
                        notify_message = MESSAGES["admin_notification"].format(
                            username=user_name,
                            chat_name=chat_info["name"],
                            admin_username=admin_username
                        )
                        await notify_admins(notify_message, callback_query.from_user.id, chat_id)
                else:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    if additional_data and additional_data.get("privacy_restricted"):
                        # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                        await state.set_state(UserStates.changing_privacy)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                        await bot.edit_message_text(
                            chat_id=callback_query.message.chat.id,
                            message_id=callback_query.message.message_id,
                            text=MESSAGES["privacy_issue"],
                            reply_markup=get_privacy_issue_keyboard()
                        )
                    else:
                        # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                        await bot.edit_message_text(
                            chat_id=callback_query.message.chat.id,
                            message_id=callback_query.message.message_id,
                            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç: {message}",
                            reply_markup=get_chat_selection_keyboard()
                        )
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} –≤ —á–∞—Ç {chat_id}: {message}")
        
        elif callback_data == "show_privacy_instructions":
            # –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            for i, instruction in enumerate(PRIVACY_INSTRUCTIONS):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                if i == 0:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=instruction["text"],
                        reply_markup=None
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                    await bot.send_message(
                        chat_id=callback_query.message.chat.id,
                        text=instruction["text"]
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if "image" in instruction and instruction["image"]:
                    try:
                        with open(instruction["image"], "rb") as photo:
                            await bot.send_photo(
                                chat_id=callback_query.message.chat.id,
                                photo=photo
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {instruction['image']}: {e}")
                        await bot.send_message(
                            chat_id=callback_query.message.chat.id,
                            text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"
                        )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_privacy_issue_keyboard()
            )
        
        elif callback_data == "try_again":
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            chat_id = data.get("selected_chat_id")
            
            if not chat_id:
                # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–∞
                await state.set_state(UserStates.selecting_chat)
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=MESSAGES["select_chat"],
                    reply_markup=get_chat_selection_keyboard()
                )
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            success, message, additional_data = await chat_manager.add_user_to_chat(
                user_id=callback_query.from_user.id,
                chat_id=chat_id
            )
            
            if success:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = await chat_manager.get_chat_info(chat_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=chat_info["welcome_message"] or MESSAGES["success_join"],
                    reply_markup=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                if additional_data and "admin_username" in additional_data:
                    admin_username = additional_data["admin_username"]
                    user_name = callback_query.from_user.username or f"id{callback_query.from_user.id}"
                    notify_message = MESSAGES["admin_notification"].format(
                        username=user_name,
                        chat_name=chat_info["name"],
                        admin_username=admin_username
                    )
                    await notify_admins(notify_message, callback_query.from_user.id, chat_id)
            else:
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                if additional_data and additional_data.get("privacy_restricted"):
                    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                             "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
                        reply_markup=get_privacy_issue_keyboard()
                    )
                else:
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç: {message}",
                        reply_markup=get_chat_selection_keyboard()
                    )
        
        elif callback_data == "contact_admin":
            # –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_info = get_admin_contact_info()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            contact_text = (
                "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
                f"‚Ä¢ Telegram: @{admin_info['username']}\n"
                f"‚Ä¢ Email: {admin_info['email']}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {admin_info['phone']}\n\n"
                "–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=contact_text,
                reply_markup=get_privacy_issue_keyboard()
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await state.set_state(UserStates.feedback)
        
        elif callback_data == "back_to_start":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=MESSAGES["welcome"],
                reply_markup=get_start_keyboard()
            )
        
        elif callback_data == "info":
            # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ —á–∞—Ç–∞—Ö
            info_text = (
                "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–∞—Ö:\n\n"
                f"1. {CHATS[CHAT_ID_1]['name']}\n"
                f"{CHATS[CHAT_ID_1]['description']}\n\n"
                f"2. {CHATS[CHAT_ID_2]['name']}\n"
                f"{CHATS[CHAT_ID_2]['description']}\n\n"
                "–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∏–∑ —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–•–æ—á—É –≤ —á–∞—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
            back_btn = InlineKeyboardButton(text=MESSAGES["back_button"], callback_data="back_to_start")
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=info_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
            )
        
        elif callback_data == "support":
            # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_info = get_admin_contact_info()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
            support_text = (
                "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin_info['username']}\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {admin_info['email']}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
            )
            back_btn = InlineKeyboardButton(text=MESSAGES["back_button"], callback_data="back_to_start")
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=support_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
            )
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –∫–æ–ª–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=MESSAGES["welcome"],
                reply_markup=get_start_keyboard()
            )
    
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query {callback_data}: {e}")
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
            await state.clear()
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=MESSAGES["welcome"],
                reply_markup=get_start_keyboard()
            )
        except Exception:
            pass
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try:
        await callback_query.answer()
    except Exception:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.message(UserStates.feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    chat_id = data.get("selected_chat_id")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"id{message.from_user.id}"
    admin_message = (
        f"üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:\n\n"
        f"{message.text}\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
        f"–ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await notify_admins(admin_message, message.from_user.id, chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
    await state.clear()
    await message.answer(
        MESSAGES["welcome"],
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def process_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_start_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π...")
        from session_manager import session_manager
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        from db_manager import DBManager
        if not DBManager.check_connection():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        return False 