import logging
from typing import Tuple, Optional, Dict, Any
from db_manager import DBManager
from session_manager import session_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChatManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    async def add_user_to_chat(user_id: int, chat_id: int) -> Tuple[bool, str, Optional[Dict[str, Any]]]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            chat_id: ID —á–∞—Ç–∞ Telegram
            
        Returns:
            Tuple —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–ø.–¥–∞–Ω–Ω—ã–µ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            admin_account = DBManager.get_admin_for_chat(chat_id)
            if not admin_account:
                logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}")
                return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success, message = await session_manager.add_chat_member(
                admin_id=admin_account.id,
                chat_id=chat_id,
                user_id=user_id
            )
            
            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–∞—Ç–µ –≤ –ë–î
                DBManager.add_chat_member(user_id, chat_id, admin_account.id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–¥–º–∏–Ω–µ
                return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", {
                    "admin_id": admin_account.id,
                    "admin_username": admin_account.username
                }
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                if "USER_PRIVACY_RESTRICTED" in message:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                    join_request = DBManager.create_join_request(user_id, chat_id)
                    if join_request:
                        DBManager.update_join_request(join_request.id, "manual_needed")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å —Ñ–ª–∞–≥–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                    return False, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
                        "privacy_restricted": True
                    }
                
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {message}", None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}: {e}")
            return False, f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}", None
    
    @staticmethod
    async def check_user_can_be_added(user_id: int, chat_id: int) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            chat_id: ID —á–∞—Ç–∞ Telegram
            
        Returns:
            Tuple —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø—Ä–∏—á–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
            session = DBManager.get_session()
            from db_manager import User
            user = session.query(User).filter(User.user_id == user_id).first()
            
            if user and user.is_banned:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ
            from db_manager import ChatMember
            member = session.query(ChatMember).join(User).filter(
                User.user_id == user_id,
                ChatMember.chat_id == chat_id
            ).first()
            
            if member:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ"
            
            # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–∞–∫–∫–∞—É–Ω—Ç—ã
            # - –∏ —Ç.–¥.
            
            return True, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        finally:
            session.close()
    
    @staticmethod
    async def process_manual_join_request(request_id: int, approved: bool, admin_id: int) -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
        
        Args:
            request_id: ID –∑–∞—è–≤–∫–∏
            approved: –û–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            admin_id: ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É
            
        Returns:
            Tuple —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
            session = DBManager.get_session()
            from db_manager import JoinRequest, User
            request = session.query(JoinRequest).filter(JoinRequest.id == request_id).first()
            
            if not request:
                return False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.id == request.user_id).first()
            if not user:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
            if approved:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                DBManager.update_join_request(request_id, "approved", admin_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–∞—Ç–µ
                DBManager.add_chat_member(user.user_id, request.chat_id, admin_id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                DBManager.log_action(
                    action="manual_approve_request",
                    description=f"–ê–¥–º–∏–Ω {admin_id} –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É {request_id}",
                    user_id=user.user_id,
                    admin_id=admin_id,
                    chat_id=request.chat_id
                )
                
                return True, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞"
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                DBManager.update_join_request(request_id, "rejected", admin_id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                DBManager.log_action(
                    action="manual_reject_request",
                    description=f"–ê–¥–º–∏–Ω {admin_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É {request_id}",
                    user_id=user.user_id,
                    admin_id=admin_id,
                    chat_id=request.chat_id
                )
                
                return True, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ {request_id}: {e}")
            return False, f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        finally:
            session.close()
    
    @staticmethod
    def get_chat_info(chat_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        
        Args:
            chat_id: ID —á–∞—Ç–∞ Telegram
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏–∑ –ë–î
        settings = DBManager.get_chat_settings(chat_id)
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not settings:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from config import CHATS
            chat_info = CHATS.get(chat_id, {})
            
            return {
                "id": chat_id,
                "name": chat_info.get("name", f"–ß–∞—Ç {chat_id}"),
                "description": chat_info.get("description", ""),
                "join_mode": "auto_approve",
                "is_active": True,
                "welcome_message": chat_info.get("welcome_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ")
            }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return {
            "id": chat_id,
            "name": settings.name,
            "description": settings.description,
            "join_mode": settings.join_mode,
            "is_active": settings.is_active,
            "welcome_message": settings.welcome_message or "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
        }
    
    @staticmethod
    def update_chat_settings(chat_id: int, **kwargs) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞ Telegram
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (name, description, welcome_message, join_mode, is_active)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            result = DBManager.update_chat_settings(chat_id, **kwargs)
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤
chat_manager = ChatManager() 